/*
    テトリミノブロックの定義
*/
const I_Tetrimino = [
    //正位置
    [[1,1,1,1],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左90度回転
    [[1,0,0,0],
    [1,0,0,0],
    [1,0,0,0],
    [1,0,0,0]],
    //左180度回転
    [[0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [1,1,1,1]],
    //左270度回転
    [[0,0,0,1],
    [0,0,0,1],
    [0,0,0,1],
    [0,0,0,1]]
];

const O_Tetrimino = [
    //正位置
    [[0,1,1,0],
    [0,1,1,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左90度回転
    [[0,1,1,0],
    [0,1,1,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左180度回転
    [[0,1,1,0],
    [0,1,1,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左270度回転
    [[0,1,1,0],
    [0,1,1,0],
    [0,0,0,0],
    [0,0,0,0]]
];

const S_Tetrimino = [
    //正位置
    [[0,1,1,0],
    [1,1,0,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左90度回転
    [[1,0,0,0],
    [1,1,0,0],
    [0,1,0,0],
    [0,0,0,0]],
    //左180度回転
    [[0,0,0,0],
    [0,1,1,0],
    [1,1,0,0],
    [0,0,0,0]],
    //左270度回転
    [[0,0,0,0],
    [0,1,0,0],
    [0,1,1,0],
    [0,0,1,0]]
];

const Z_Tetrimino = [
    //正位置
    [[1,1,0,0],
    [0,1,1,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左90度回転
    [[0,0,1,0],
    [0,1,1,0],
    [0,1,0,0],
    [0,0,0,0]],
    //左180度回転
    [[0,0,0,0],
    [0,1,1,0],
    [0,0,1,1],
    [0,0,0,0]],
    //左270度回転
    [[0,0,0,0],
    [0,0,0,1],
    [0,0,1,1],
    [0,0,1,0]]
];

const J_Tetrimino = [
    //正位置
    [[0,1,0,0],
    [0,1,0,0],
    [1,1,0,0],
    [0,0,0,0]],
    //左90度回転
    [[0,0,0,0],
    [1,1,1,0],
    [0,0,1,0],
    [0,0,0,0]],
    //左180度回転
    [[0,0,0,0],
    [1,1,0,0],
    [1,0,0,0],
    [1,0,0,0]],
    //左270度回転
    [[0,0,0,0],
    [0,0,0,0],
    [1,0,0,0],
    [1,1,1,0]]
];

const L_Tetrimino = [
    //正位置
    [[0,1,0,0],
    [0,1,0,0],
    [0,1,1,0],
    [0,0,0,0]],
    //左90度回転
    [[0,0,1,0],
    [1,1,1,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左180度回転
    [[0,0,0,0],
    [0,1,1,0],
    [0,0,1,0],
    [0,0,1,0]],
    //左270度回転
    [[0,0,0,0],
    [0,1,1,1],
    [0,1,0,0],
    [0,0,0,0]]
];

const T_Tetrimino = [
    //正位置
    [[0,1,0,0],
    [1,1,1,0],
    [0,0,0,0],
    [0,0,0,0]],
    //左90度回転
    [[0,1,0,0],
    [1,1,0,0],
    [0,1,0,0],
    [0,0,0,0]],
    //左180度回転
    [[0,0,0,0],
    [1,1,1,0],
    [0,1,0,0],
    [0,0,0,0]],
    //左270度回転
    [[0,0,0,0],
    [0,1,0,0],
    [0,1,1,0],
    [0,1,0,0]]
];

/*
    テトリミノ操作提供クラス
*/
class Tetrmino
{
    #block;
    #index;
    constructor(block){
        this.#block = block;
        this.#index = 0; //初期は正位置
    }

    roll(){
        this.#index++;
        if(this.#index>=4){
            this.#index = 0;
        }
    }

    get block(){
        return this.#block[this.#index];
    }
}

/*
    Stage提供クラス※インスタンス生成はしない。
*/
class Stage
{
    static #map=[];
    static create(){
        let i;
        for(i=0; i < 20; i++){
            Stage.#map[i] = [];
            for(let j=0; j <= 11; j++){
                if(0===j || 11===j){
                    Stage.#map[i].push(1);
                }else{
                    Stage.#map[i].push(0);
                }
            }
        }
        //最終行は全て1にする。
        Stage.#map[i]=[];
        for(let j=0; j <= 11; j++){
            Stage.#map[i].push(1);
        }
    }
    static get map(){
        console.log(Stage.#map.length);
        if(Stage.#map.length==0){
            //マップが完成できていなかったら、こちら側で作ってあげる
            Stage.create();
        }
        return Stage.#map;
    }
}
